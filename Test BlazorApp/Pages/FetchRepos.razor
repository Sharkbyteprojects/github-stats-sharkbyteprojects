@page "/repos"
@inject HttpClient Http
@code {
    bool stateof = false;
    void toggleid()
    {
        stateof = !stateof;
    }
}
<h1>Latest Repositories</h1>

<p>Here are the latest GitHub Repositories created by Sharkbyteprojects</p>

@if (repositorielist == null)
{
    @if (error == "")
    {
        <p><em><span class="oi oi-reload loading" aria-hidden="true"></span><br />Here must be something! Loading...</em></p>
    }
    else
    {
        <p>
            <em>
                <span class="oi oi-ban ex" aria-hidden="true"></span><br />Error: @error
                @if (error.Contains("403"))
                {
                    <span><br />Maybe rate limit of GitHub, try it later!</span>
                }
            </em>
        </p>
    }
}
else
{
    <button type="button" class="btn btn-primary" @onclick="toggleid">@(stateof?"Hide":"Show") additional Information</button>
    <div style="overflow: auto; max-width: 100vw; width:100%;">
        <table class="table">
            <thead>
                <tr>
                    <th>Reposname</th>
                    @if (stateof)
                    {
                        <th>Programming Language</th>
                        <th>Description</th>
                        <th>Dates</th>
                        <th>Is a Fork?</th>
                    }
                    else
                    {
                        <th><span class="oi oi-star" aria-hidden="true"></span></th>
                        <th><span class="oi oi-fork" aria-hidden="true"></span></th>
                        <th><span class="oi oi-eye" aria-hidden="true"></span></th>
                        <th>Open Issues</th>
                        <th>License</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var repos in repositorielist)
                {
                    <tr>
                        <td>@if (repos.archived)
                        {<span class="oi oi-hard-drive" aria-hidden="true"></span>}<a href="@repos.html_url" target="_blank" class="ml-md-auto">@repos.name</a></td>
                        @if (stateof)
                        {
                            <td>@repos.language</td>
                            <td><textarea readonly="readonly" class="form-control" style="resize: none; max-width: 200px; max-height: 200px;">@repos.description</textarea></td>
                            <td>
                                Created: @repos.created_at.ToShortDateString() @repos.created_at.ToShortTimeString()<br />
                                Updated: @repos.updated_at.ToShortDateString() @repos.updated_at.ToShortTimeString()<br />
                                Pushed: @repos.pushed_at.ToShortDateString() @repos.pushed_at.ToShortTimeString()
                            </td>
                            <td>
                                @(repos.fork ? "Yes" : "No")
                            </td>
                        }
                        else
                        {
                            <td>@repos.stargazers_count</td>
                            <td>@repos.forks</td>
                            <td>@repos.watchers</td>
                            <td>@repos.open_issues</td>

                            @if (repos.license != null)
                            {
                                <td>
                                    <a href="@repos.license.url" target="_blank">@repos.license.spdx_id</a>
                                </td>
                            }
                            else
                            {
                                <td>-</td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <p>If the repos is archived, <span class="oi oi-hard-drive" aria-hidden="true"></span> stand before the name.</p>
}
@code {
    private repos[] repositorielist;
    String error = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            App.sett setting = await Http.GetFromJsonAsync<App.sett>("settings.json");
            repositorielist = await Http.GetFromJsonAsync<repos[]>(string.Format("https://api.github.com/users/{0}/repos?sort=latest&per_page=20", setting.checkex()));
        }catch(Exception ex){
            error = ex.Message;
        }
    }
    public class lic
    {
        public string spdx_id { get; set; }

        public string url { get; set; }
    }
    public class repos
    {
        public string name { get; set; }

        public string language { get; set; }

        public string html_url { get; set; }

        public DateTime created_at { get; set; }

        public DateTime pushed_at { get; set; }

        public DateTime updated_at { get; set; }

        public string description { get; set; }

        public bool fork { get; set; }

        public int forks { get; set; }

        public int watchers { get; set; }

        public int open_issues { get; set; }

        public bool archived { get; set; }

        public int stargazers_count { get; set; }

        public lic license { get; set; }
    }
}
